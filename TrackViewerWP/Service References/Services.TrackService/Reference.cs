//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace TrackViewerWP.Services.TrackService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackLocation", Namespace="http://schemas.datacontract.org/2004/07/WCFTrackServiceWebRole")]
    public partial class TrackLocation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private int TrackNoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrackNo {
            get {
                return this.TrackNoField;
            }
            set {
                if ((this.TrackNoField.Equals(value) != true)) {
                    this.TrackNoField = value;
                    this.RaisePropertyChanged("TrackNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.TrackService.ITrackService")]
    public interface ITrackService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/StartTracking", ReplyAction="http://tempuri.org/ITrackService/StartTrackingResponse")]
        System.IAsyncResult BeginStartTracking(string deviceId, TrackViewerWP.Services.TrackService.TrackLocation location, System.AsyncCallback callback, object asyncState);
        
        long EndStartTracking(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/PublishTrackingInfo", ReplyAction="http://tempuri.org/ITrackService/PublishTrackingInfoResponse")]
        System.IAsyncResult BeginPublishTrackingInfo(long trackId, TrackViewerWP.Services.TrackService.TrackLocation location, System.AsyncCallback callback, object asyncState);
        
        void EndPublishTrackingInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/StopTracking", ReplyAction="http://tempuri.org/ITrackService/StopTrackingResponse")]
        System.IAsyncResult BeginStopTracking(long trackId, System.AsyncCallback callback, object asyncState);
        
        long EndStopTracking(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/GetTrackingInfo", ReplyAction="http://tempuri.org/ITrackService/GetTrackingInfoResponse")]
        System.IAsyncResult BeginGetTrackingInfo(long trackId, System.AsyncCallback callback, object asyncState);
        
        TrackViewerWP.Services.TrackService.TrackLocation EndGetTrackingInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/StartTrackingRestful", ReplyAction="http://tempuri.org/ITrackService/StartTrackingRestfulResponse")]
        System.IAsyncResult BeginStartTrackingRestful(string deviceId, string latitude, string longitude, string trackNo, System.AsyncCallback callback, object asyncState);
        
        long EndStartTrackingRestful(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/PublishTrackingInfoRestful", ReplyAction="http://tempuri.org/ITrackService/PublishTrackingInfoRestfulResponse")]
        System.IAsyncResult BeginPublishTrackingInfoRestful(string latitude, string longitude, string trackNo, System.AsyncCallback callback, object asyncState);
        
        void EndPublishTrackingInfoRestful(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/GetTrackingInfoRestful", ReplyAction="http://tempuri.org/ITrackService/GetTrackingInfoRestfulResponse")]
        System.IAsyncResult BeginGetTrackingInfoRestful(string trackId, System.AsyncCallback callback, object asyncState);
        
        TrackViewerWP.Services.TrackService.TrackLocation EndGetTrackingInfoRestful(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/IsUserRegistered", ReplyAction="http://tempuri.org/ITrackService/IsUserRegisteredResponse")]
        System.IAsyncResult BeginIsUserRegistered(string deviceId, System.AsyncCallback callback, object asyncState);
        
        bool EndIsUserRegistered(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/RegisterUser", ReplyAction="http://tempuri.org/ITrackService/RegisterUserResponse")]
        System.IAsyncResult BeginRegisterUser(string deviceId, string activationCode, string name, string emailAddress, System.AsyncCallback callback, object asyncState);
        
        long EndRegisterUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrackService/UpdateIsActivated", ReplyAction="http://tempuri.org/ITrackService/UpdateIsActivatedResponse")]
        System.IAsyncResult BeginUpdateIsActivated(string deviceId, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateIsActivated(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrackServiceChannel : TrackViewerWP.Services.TrackService.ITrackService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartTrackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartTrackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StopTrackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StopTrackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrackingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrackingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TrackViewerWP.Services.TrackService.TrackLocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TrackViewerWP.Services.TrackService.TrackLocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartTrackingRestfulCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartTrackingRestfulCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrackingInfoRestfulCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrackingInfoRestfulCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TrackViewerWP.Services.TrackService.TrackLocation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TrackViewerWP.Services.TrackService.TrackLocation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsUserRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsUserRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrackServiceClient : System.ServiceModel.ClientBase<TrackViewerWP.Services.TrackService.ITrackService>, TrackViewerWP.Services.TrackService.ITrackService {
        
        private BeginOperationDelegate onBeginStartTrackingDelegate;
        
        private EndOperationDelegate onEndStartTrackingDelegate;
        
        private System.Threading.SendOrPostCallback onStartTrackingCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublishTrackingInfoDelegate;
        
        private EndOperationDelegate onEndPublishTrackingInfoDelegate;
        
        private System.Threading.SendOrPostCallback onPublishTrackingInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginStopTrackingDelegate;
        
        private EndOperationDelegate onEndStopTrackingDelegate;
        
        private System.Threading.SendOrPostCallback onStopTrackingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrackingInfoDelegate;
        
        private EndOperationDelegate onEndGetTrackingInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrackingInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartTrackingRestfulDelegate;
        
        private EndOperationDelegate onEndStartTrackingRestfulDelegate;
        
        private System.Threading.SendOrPostCallback onStartTrackingRestfulCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublishTrackingInfoRestfulDelegate;
        
        private EndOperationDelegate onEndPublishTrackingInfoRestfulDelegate;
        
        private System.Threading.SendOrPostCallback onPublishTrackingInfoRestfulCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrackingInfoRestfulDelegate;
        
        private EndOperationDelegate onEndGetTrackingInfoRestfulDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrackingInfoRestfulCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsUserRegisteredDelegate;
        
        private EndOperationDelegate onEndIsUserRegisteredDelegate;
        
        private System.Threading.SendOrPostCallback onIsUserRegisteredCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterUserDelegate;
        
        private EndOperationDelegate onEndRegisterUserDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateIsActivatedDelegate;
        
        private EndOperationDelegate onEndUpdateIsActivatedDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateIsActivatedCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TrackServiceClient() {
        }
        
        public TrackServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TrackServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrackServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrackServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<StartTrackingCompletedEventArgs> StartTrackingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PublishTrackingInfoCompleted;
        
        public event System.EventHandler<StopTrackingCompletedEventArgs> StopTrackingCompleted;
        
        public event System.EventHandler<GetTrackingInfoCompletedEventArgs> GetTrackingInfoCompleted;
        
        public event System.EventHandler<StartTrackingRestfulCompletedEventArgs> StartTrackingRestfulCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PublishTrackingInfoRestfulCompleted;
        
        public event System.EventHandler<GetTrackingInfoRestfulCompletedEventArgs> GetTrackingInfoRestfulCompleted;
        
        public event System.EventHandler<IsUserRegisteredCompletedEventArgs> IsUserRegisteredCompleted;
        
        public event System.EventHandler<RegisterUserCompletedEventArgs> RegisterUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateIsActivatedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginStartTracking(string deviceId, TrackViewerWP.Services.TrackService.TrackLocation location, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartTracking(deviceId, location, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long TrackViewerWP.Services.TrackService.ITrackService.EndStartTracking(System.IAsyncResult result) {
            return base.Channel.EndStartTracking(result);
        }
        
        private System.IAsyncResult OnBeginStartTracking(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceId = ((string)(inValues[0]));
            TrackViewerWP.Services.TrackService.TrackLocation location = ((TrackViewerWP.Services.TrackService.TrackLocation)(inValues[1]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginStartTracking(deviceId, location, callback, asyncState);
        }
        
        private object[] OnEndStartTracking(System.IAsyncResult result) {
            long retVal = ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndStartTracking(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartTrackingCompleted(object state) {
            if ((this.StartTrackingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartTrackingCompleted(this, new StartTrackingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartTrackingAsync(string deviceId, TrackViewerWP.Services.TrackService.TrackLocation location) {
            this.StartTrackingAsync(deviceId, location, null);
        }
        
        public void StartTrackingAsync(string deviceId, TrackViewerWP.Services.TrackService.TrackLocation location, object userState) {
            if ((this.onBeginStartTrackingDelegate == null)) {
                this.onBeginStartTrackingDelegate = new BeginOperationDelegate(this.OnBeginStartTracking);
            }
            if ((this.onEndStartTrackingDelegate == null)) {
                this.onEndStartTrackingDelegate = new EndOperationDelegate(this.OnEndStartTracking);
            }
            if ((this.onStartTrackingCompletedDelegate == null)) {
                this.onStartTrackingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartTrackingCompleted);
            }
            base.InvokeAsync(this.onBeginStartTrackingDelegate, new object[] {
                        deviceId,
                        location}, this.onEndStartTrackingDelegate, this.onStartTrackingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginPublishTrackingInfo(long trackId, TrackViewerWP.Services.TrackService.TrackLocation location, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublishTrackingInfo(trackId, location, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TrackViewerWP.Services.TrackService.ITrackService.EndPublishTrackingInfo(System.IAsyncResult result) {
            base.Channel.EndPublishTrackingInfo(result);
        }
        
        private System.IAsyncResult OnBeginPublishTrackingInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long trackId = ((long)(inValues[0]));
            TrackViewerWP.Services.TrackService.TrackLocation location = ((TrackViewerWP.Services.TrackService.TrackLocation)(inValues[1]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginPublishTrackingInfo(trackId, location, callback, asyncState);
        }
        
        private object[] OnEndPublishTrackingInfo(System.IAsyncResult result) {
            ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndPublishTrackingInfo(result);
            return null;
        }
        
        private void OnPublishTrackingInfoCompleted(object state) {
            if ((this.PublishTrackingInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublishTrackingInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublishTrackingInfoAsync(long trackId, TrackViewerWP.Services.TrackService.TrackLocation location) {
            this.PublishTrackingInfoAsync(trackId, location, null);
        }
        
        public void PublishTrackingInfoAsync(long trackId, TrackViewerWP.Services.TrackService.TrackLocation location, object userState) {
            if ((this.onBeginPublishTrackingInfoDelegate == null)) {
                this.onBeginPublishTrackingInfoDelegate = new BeginOperationDelegate(this.OnBeginPublishTrackingInfo);
            }
            if ((this.onEndPublishTrackingInfoDelegate == null)) {
                this.onEndPublishTrackingInfoDelegate = new EndOperationDelegate(this.OnEndPublishTrackingInfo);
            }
            if ((this.onPublishTrackingInfoCompletedDelegate == null)) {
                this.onPublishTrackingInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublishTrackingInfoCompleted);
            }
            base.InvokeAsync(this.onBeginPublishTrackingInfoDelegate, new object[] {
                        trackId,
                        location}, this.onEndPublishTrackingInfoDelegate, this.onPublishTrackingInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginStopTracking(long trackId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStopTracking(trackId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long TrackViewerWP.Services.TrackService.ITrackService.EndStopTracking(System.IAsyncResult result) {
            return base.Channel.EndStopTracking(result);
        }
        
        private System.IAsyncResult OnBeginStopTracking(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long trackId = ((long)(inValues[0]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginStopTracking(trackId, callback, asyncState);
        }
        
        private object[] OnEndStopTracking(System.IAsyncResult result) {
            long retVal = ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndStopTracking(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStopTrackingCompleted(object state) {
            if ((this.StopTrackingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StopTrackingCompleted(this, new StopTrackingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StopTrackingAsync(long trackId) {
            this.StopTrackingAsync(trackId, null);
        }
        
        public void StopTrackingAsync(long trackId, object userState) {
            if ((this.onBeginStopTrackingDelegate == null)) {
                this.onBeginStopTrackingDelegate = new BeginOperationDelegate(this.OnBeginStopTracking);
            }
            if ((this.onEndStopTrackingDelegate == null)) {
                this.onEndStopTrackingDelegate = new EndOperationDelegate(this.OnEndStopTracking);
            }
            if ((this.onStopTrackingCompletedDelegate == null)) {
                this.onStopTrackingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStopTrackingCompleted);
            }
            base.InvokeAsync(this.onBeginStopTrackingDelegate, new object[] {
                        trackId}, this.onEndStopTrackingDelegate, this.onStopTrackingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginGetTrackingInfo(long trackId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrackingInfo(trackId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TrackViewerWP.Services.TrackService.TrackLocation TrackViewerWP.Services.TrackService.ITrackService.EndGetTrackingInfo(System.IAsyncResult result) {
            return base.Channel.EndGetTrackingInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetTrackingInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long trackId = ((long)(inValues[0]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginGetTrackingInfo(trackId, callback, asyncState);
        }
        
        private object[] OnEndGetTrackingInfo(System.IAsyncResult result) {
            TrackViewerWP.Services.TrackService.TrackLocation retVal = ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndGetTrackingInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrackingInfoCompleted(object state) {
            if ((this.GetTrackingInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrackingInfoCompleted(this, new GetTrackingInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrackingInfoAsync(long trackId) {
            this.GetTrackingInfoAsync(trackId, null);
        }
        
        public void GetTrackingInfoAsync(long trackId, object userState) {
            if ((this.onBeginGetTrackingInfoDelegate == null)) {
                this.onBeginGetTrackingInfoDelegate = new BeginOperationDelegate(this.OnBeginGetTrackingInfo);
            }
            if ((this.onEndGetTrackingInfoDelegate == null)) {
                this.onEndGetTrackingInfoDelegate = new EndOperationDelegate(this.OnEndGetTrackingInfo);
            }
            if ((this.onGetTrackingInfoCompletedDelegate == null)) {
                this.onGetTrackingInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrackingInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrackingInfoDelegate, new object[] {
                        trackId}, this.onEndGetTrackingInfoDelegate, this.onGetTrackingInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginStartTrackingRestful(string deviceId, string latitude, string longitude, string trackNo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartTrackingRestful(deviceId, latitude, longitude, trackNo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long TrackViewerWP.Services.TrackService.ITrackService.EndStartTrackingRestful(System.IAsyncResult result) {
            return base.Channel.EndStartTrackingRestful(result);
        }
        
        private System.IAsyncResult OnBeginStartTrackingRestful(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceId = ((string)(inValues[0]));
            string latitude = ((string)(inValues[1]));
            string longitude = ((string)(inValues[2]));
            string trackNo = ((string)(inValues[3]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginStartTrackingRestful(deviceId, latitude, longitude, trackNo, callback, asyncState);
        }
        
        private object[] OnEndStartTrackingRestful(System.IAsyncResult result) {
            long retVal = ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndStartTrackingRestful(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartTrackingRestfulCompleted(object state) {
            if ((this.StartTrackingRestfulCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartTrackingRestfulCompleted(this, new StartTrackingRestfulCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartTrackingRestfulAsync(string deviceId, string latitude, string longitude, string trackNo) {
            this.StartTrackingRestfulAsync(deviceId, latitude, longitude, trackNo, null);
        }
        
        public void StartTrackingRestfulAsync(string deviceId, string latitude, string longitude, string trackNo, object userState) {
            if ((this.onBeginStartTrackingRestfulDelegate == null)) {
                this.onBeginStartTrackingRestfulDelegate = new BeginOperationDelegate(this.OnBeginStartTrackingRestful);
            }
            if ((this.onEndStartTrackingRestfulDelegate == null)) {
                this.onEndStartTrackingRestfulDelegate = new EndOperationDelegate(this.OnEndStartTrackingRestful);
            }
            if ((this.onStartTrackingRestfulCompletedDelegate == null)) {
                this.onStartTrackingRestfulCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartTrackingRestfulCompleted);
            }
            base.InvokeAsync(this.onBeginStartTrackingRestfulDelegate, new object[] {
                        deviceId,
                        latitude,
                        longitude,
                        trackNo}, this.onEndStartTrackingRestfulDelegate, this.onStartTrackingRestfulCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginPublishTrackingInfoRestful(string latitude, string longitude, string trackNo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublishTrackingInfoRestful(latitude, longitude, trackNo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TrackViewerWP.Services.TrackService.ITrackService.EndPublishTrackingInfoRestful(System.IAsyncResult result) {
            base.Channel.EndPublishTrackingInfoRestful(result);
        }
        
        private System.IAsyncResult OnBeginPublishTrackingInfoRestful(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string latitude = ((string)(inValues[0]));
            string longitude = ((string)(inValues[1]));
            string trackNo = ((string)(inValues[2]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginPublishTrackingInfoRestful(latitude, longitude, trackNo, callback, asyncState);
        }
        
        private object[] OnEndPublishTrackingInfoRestful(System.IAsyncResult result) {
            ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndPublishTrackingInfoRestful(result);
            return null;
        }
        
        private void OnPublishTrackingInfoRestfulCompleted(object state) {
            if ((this.PublishTrackingInfoRestfulCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublishTrackingInfoRestfulCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublishTrackingInfoRestfulAsync(string latitude, string longitude, string trackNo) {
            this.PublishTrackingInfoRestfulAsync(latitude, longitude, trackNo, null);
        }
        
        public void PublishTrackingInfoRestfulAsync(string latitude, string longitude, string trackNo, object userState) {
            if ((this.onBeginPublishTrackingInfoRestfulDelegate == null)) {
                this.onBeginPublishTrackingInfoRestfulDelegate = new BeginOperationDelegate(this.OnBeginPublishTrackingInfoRestful);
            }
            if ((this.onEndPublishTrackingInfoRestfulDelegate == null)) {
                this.onEndPublishTrackingInfoRestfulDelegate = new EndOperationDelegate(this.OnEndPublishTrackingInfoRestful);
            }
            if ((this.onPublishTrackingInfoRestfulCompletedDelegate == null)) {
                this.onPublishTrackingInfoRestfulCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublishTrackingInfoRestfulCompleted);
            }
            base.InvokeAsync(this.onBeginPublishTrackingInfoRestfulDelegate, new object[] {
                        latitude,
                        longitude,
                        trackNo}, this.onEndPublishTrackingInfoRestfulDelegate, this.onPublishTrackingInfoRestfulCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginGetTrackingInfoRestful(string trackId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrackingInfoRestful(trackId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TrackViewerWP.Services.TrackService.TrackLocation TrackViewerWP.Services.TrackService.ITrackService.EndGetTrackingInfoRestful(System.IAsyncResult result) {
            return base.Channel.EndGetTrackingInfoRestful(result);
        }
        
        private System.IAsyncResult OnBeginGetTrackingInfoRestful(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trackId = ((string)(inValues[0]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginGetTrackingInfoRestful(trackId, callback, asyncState);
        }
        
        private object[] OnEndGetTrackingInfoRestful(System.IAsyncResult result) {
            TrackViewerWP.Services.TrackService.TrackLocation retVal = ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndGetTrackingInfoRestful(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrackingInfoRestfulCompleted(object state) {
            if ((this.GetTrackingInfoRestfulCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrackingInfoRestfulCompleted(this, new GetTrackingInfoRestfulCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrackingInfoRestfulAsync(string trackId) {
            this.GetTrackingInfoRestfulAsync(trackId, null);
        }
        
        public void GetTrackingInfoRestfulAsync(string trackId, object userState) {
            if ((this.onBeginGetTrackingInfoRestfulDelegate == null)) {
                this.onBeginGetTrackingInfoRestfulDelegate = new BeginOperationDelegate(this.OnBeginGetTrackingInfoRestful);
            }
            if ((this.onEndGetTrackingInfoRestfulDelegate == null)) {
                this.onEndGetTrackingInfoRestfulDelegate = new EndOperationDelegate(this.OnEndGetTrackingInfoRestful);
            }
            if ((this.onGetTrackingInfoRestfulCompletedDelegate == null)) {
                this.onGetTrackingInfoRestfulCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrackingInfoRestfulCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrackingInfoRestfulDelegate, new object[] {
                        trackId}, this.onEndGetTrackingInfoRestfulDelegate, this.onGetTrackingInfoRestfulCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginIsUserRegistered(string deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsUserRegistered(deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TrackViewerWP.Services.TrackService.ITrackService.EndIsUserRegistered(System.IAsyncResult result) {
            return base.Channel.EndIsUserRegistered(result);
        }
        
        private System.IAsyncResult OnBeginIsUserRegistered(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceId = ((string)(inValues[0]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginIsUserRegistered(deviceId, callback, asyncState);
        }
        
        private object[] OnEndIsUserRegistered(System.IAsyncResult result) {
            bool retVal = ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndIsUserRegistered(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsUserRegisteredCompleted(object state) {
            if ((this.IsUserRegisteredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsUserRegisteredCompleted(this, new IsUserRegisteredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsUserRegisteredAsync(string deviceId) {
            this.IsUserRegisteredAsync(deviceId, null);
        }
        
        public void IsUserRegisteredAsync(string deviceId, object userState) {
            if ((this.onBeginIsUserRegisteredDelegate == null)) {
                this.onBeginIsUserRegisteredDelegate = new BeginOperationDelegate(this.OnBeginIsUserRegistered);
            }
            if ((this.onEndIsUserRegisteredDelegate == null)) {
                this.onEndIsUserRegisteredDelegate = new EndOperationDelegate(this.OnEndIsUserRegistered);
            }
            if ((this.onIsUserRegisteredCompletedDelegate == null)) {
                this.onIsUserRegisteredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsUserRegisteredCompleted);
            }
            base.InvokeAsync(this.onBeginIsUserRegisteredDelegate, new object[] {
                        deviceId}, this.onEndIsUserRegisteredDelegate, this.onIsUserRegisteredCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginRegisterUser(string deviceId, string activationCode, string name, string emailAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterUser(deviceId, activationCode, name, emailAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long TrackViewerWP.Services.TrackService.ITrackService.EndRegisterUser(System.IAsyncResult result) {
            return base.Channel.EndRegisterUser(result);
        }
        
        private System.IAsyncResult OnBeginRegisterUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceId = ((string)(inValues[0]));
            string activationCode = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            string emailAddress = ((string)(inValues[3]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginRegisterUser(deviceId, activationCode, name, emailAddress, callback, asyncState);
        }
        
        private object[] OnEndRegisterUser(System.IAsyncResult result) {
            long retVal = ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndRegisterUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterUserCompleted(object state) {
            if ((this.RegisterUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterUserCompleted(this, new RegisterUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterUserAsync(string deviceId, string activationCode, string name, string emailAddress) {
            this.RegisterUserAsync(deviceId, activationCode, name, emailAddress, null);
        }
        
        public void RegisterUserAsync(string deviceId, string activationCode, string name, string emailAddress, object userState) {
            if ((this.onBeginRegisterUserDelegate == null)) {
                this.onBeginRegisterUserDelegate = new BeginOperationDelegate(this.OnBeginRegisterUser);
            }
            if ((this.onEndRegisterUserDelegate == null)) {
                this.onEndRegisterUserDelegate = new EndOperationDelegate(this.OnEndRegisterUser);
            }
            if ((this.onRegisterUserCompletedDelegate == null)) {
                this.onRegisterUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterUserCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterUserDelegate, new object[] {
                        deviceId,
                        activationCode,
                        name,
                        emailAddress}, this.onEndRegisterUserDelegate, this.onRegisterUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TrackViewerWP.Services.TrackService.ITrackService.BeginUpdateIsActivated(string deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateIsActivated(deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TrackViewerWP.Services.TrackService.ITrackService.EndUpdateIsActivated(System.IAsyncResult result) {
            base.Channel.EndUpdateIsActivated(result);
        }
        
        private System.IAsyncResult OnBeginUpdateIsActivated(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceId = ((string)(inValues[0]));
            return ((TrackViewerWP.Services.TrackService.ITrackService)(this)).BeginUpdateIsActivated(deviceId, callback, asyncState);
        }
        
        private object[] OnEndUpdateIsActivated(System.IAsyncResult result) {
            ((TrackViewerWP.Services.TrackService.ITrackService)(this)).EndUpdateIsActivated(result);
            return null;
        }
        
        private void OnUpdateIsActivatedCompleted(object state) {
            if ((this.UpdateIsActivatedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateIsActivatedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateIsActivatedAsync(string deviceId) {
            this.UpdateIsActivatedAsync(deviceId, null);
        }
        
        public void UpdateIsActivatedAsync(string deviceId, object userState) {
            if ((this.onBeginUpdateIsActivatedDelegate == null)) {
                this.onBeginUpdateIsActivatedDelegate = new BeginOperationDelegate(this.OnBeginUpdateIsActivated);
            }
            if ((this.onEndUpdateIsActivatedDelegate == null)) {
                this.onEndUpdateIsActivatedDelegate = new EndOperationDelegate(this.OnEndUpdateIsActivated);
            }
            if ((this.onUpdateIsActivatedCompletedDelegate == null)) {
                this.onUpdateIsActivatedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateIsActivatedCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateIsActivatedDelegate, new object[] {
                        deviceId}, this.onEndUpdateIsActivatedDelegate, this.onUpdateIsActivatedCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TrackViewerWP.Services.TrackService.ITrackService CreateChannel() {
            return new TrackServiceClientChannel(this);
        }
        
        private class TrackServiceClientChannel : ChannelBase<TrackViewerWP.Services.TrackService.ITrackService>, TrackViewerWP.Services.TrackService.ITrackService {
            
            public TrackServiceClientChannel(System.ServiceModel.ClientBase<TrackViewerWP.Services.TrackService.ITrackService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginStartTracking(string deviceId, TrackViewerWP.Services.TrackService.TrackLocation location, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = deviceId;
                _args[1] = location;
                System.IAsyncResult _result = base.BeginInvoke("StartTracking", _args, callback, asyncState);
                return _result;
            }
            
            public long EndStartTracking(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("StartTracking", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPublishTrackingInfo(long trackId, TrackViewerWP.Services.TrackService.TrackLocation location, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = trackId;
                _args[1] = location;
                System.IAsyncResult _result = base.BeginInvoke("PublishTrackingInfo", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPublishTrackingInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PublishTrackingInfo", _args, result);
            }
            
            public System.IAsyncResult BeginStopTracking(long trackId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trackId;
                System.IAsyncResult _result = base.BeginInvoke("StopTracking", _args, callback, asyncState);
                return _result;
            }
            
            public long EndStopTracking(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("StopTracking", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrackingInfo(long trackId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trackId;
                System.IAsyncResult _result = base.BeginInvoke("GetTrackingInfo", _args, callback, asyncState);
                return _result;
            }
            
            public TrackViewerWP.Services.TrackService.TrackLocation EndGetTrackingInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                TrackViewerWP.Services.TrackService.TrackLocation _result = ((TrackViewerWP.Services.TrackService.TrackLocation)(base.EndInvoke("GetTrackingInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStartTrackingRestful(string deviceId, string latitude, string longitude, string trackNo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = deviceId;
                _args[1] = latitude;
                _args[2] = longitude;
                _args[3] = trackNo;
                System.IAsyncResult _result = base.BeginInvoke("StartTrackingRestful", _args, callback, asyncState);
                return _result;
            }
            
            public long EndStartTrackingRestful(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("StartTrackingRestful", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPublishTrackingInfoRestful(string latitude, string longitude, string trackNo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = latitude;
                _args[1] = longitude;
                _args[2] = trackNo;
                System.IAsyncResult _result = base.BeginInvoke("PublishTrackingInfoRestful", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPublishTrackingInfoRestful(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PublishTrackingInfoRestful", _args, result);
            }
            
            public System.IAsyncResult BeginGetTrackingInfoRestful(string trackId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trackId;
                System.IAsyncResult _result = base.BeginInvoke("GetTrackingInfoRestful", _args, callback, asyncState);
                return _result;
            }
            
            public TrackViewerWP.Services.TrackService.TrackLocation EndGetTrackingInfoRestful(System.IAsyncResult result) {
                object[] _args = new object[0];
                TrackViewerWP.Services.TrackService.TrackLocation _result = ((TrackViewerWP.Services.TrackService.TrackLocation)(base.EndInvoke("GetTrackingInfoRestful", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsUserRegistered(string deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("IsUserRegistered", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsUserRegistered(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsUserRegistered", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegisterUser(string deviceId, string activationCode, string name, string emailAddress, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = deviceId;
                _args[1] = activationCode;
                _args[2] = name;
                _args[3] = emailAddress;
                System.IAsyncResult _result = base.BeginInvoke("RegisterUser", _args, callback, asyncState);
                return _result;
            }
            
            public long EndRegisterUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("RegisterUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateIsActivated(string deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("UpdateIsActivated", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateIsActivated(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateIsActivated", _args, result);
            }
        }
    }
}
